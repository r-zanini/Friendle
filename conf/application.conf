# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 9

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
ebean.default="models.*"
db.default {
	# The database driver
	driver=org.h2.Driver
	# The database url
	url="jdbc:h2:file:./data/friendleDB" #db persists in a file on the HDD
}

# Play configuration
play {
	modules {
    enabled += "play.api.db.DBModule"
    enabled += "play.api.db.HikariCPModule"
  }
	akka {
	}
	db {
		# The name of the configuration item from which to read database config.
		# So, if set to db, means that db.default is where the configuration for the database named default is found.
		#config = "db"

		# The name of the default database, used when no database name is explicitly specified.
		#default = "default"
		prototype {
			hikaricp{
				# The max lifetime of a connection
				maxLifetime = 30 minutes
				# If non null, sets the minimum number of idle connections to maintain.
				minimumIdle = ${fixedConnectionPool}
				# The maximum number of connections to make.
				maximumPoolSize = ${fixedConnectionPool}
			}
		}
	}
	http {
		secret.key="ncFGz=6Y7TWr1llzMguS3Sz=SWSA<0q@vn8:RhCq0>=g9Y4MDqL9hEfR_yn5x_RW"
		session {
			# Sets the cookie to be sent only over HTTPS.
			#secure = true
			# ~~~~~
			# Sets the cookie to be accessed only by the server.
			#httpOnly = true
			# ~~~~~
			# Sets the max-age field of the cookie.
			# NOTE: this only sets when the browser will discard the cookie. Play will consider any cookie value with a valid signature to be a valid session forever.
			# To implement a server side session timeout, you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
			#maxAge = 300
			# ~~~~~
			# Sets the domain on the session cookie.
			#domain = "example.com"
		}
	}
	i18n {
		# The application languages
		langs = ["en", "fr"]
	}
	filters {
		# https://www.playframework.com/documentation/latest/JavaHttpFilters
		# ~~~~~
		# Filters run code on every request. They can be used to perform common logic for all your actions, e.g. adding common headers.
		# ~~~~~
		# Enabled filters are run automatically against Play.
		# CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
		#enabled += filters.ExampleFilter
		# ~~~~~
		# Disabled filters remove elements from the enabled list.
		#disabled += filters.ExampleFilter
		csrf {
			## CSRF Filter
			# https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
			# https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
			# ~~~~~
			# Play supports multiple methods for verifying that a request is not a CSRF request.
			# The primary mechanism is a CSRF token. This token gets placed either in the query string or body of every form submitted, and also gets placed in the users session.
			# Play then verifies that both tokens are present and match.
			# ~~~~~
			# Sets the cookie to be sent only over HTTPS
			#cookie.secure = true
			# ~~~~~
			# Defaults to CSRFErrorHandler in the root package.
			#errorHandler = MyCSRFErrorHandler
		}
		hosts {
			## Allowed hosts filter configuration
			# https://www.playframework.com/documentation/latest/AllowedHostsFilter
			# ~~~~~
			# Play provides a filter that lets you configure which hosts can access your application.
			# This is useful to prevent cache poisoning attacks.
			# ~~~~~
			allowed = ["localhost:9000"]
		}
	}
}
